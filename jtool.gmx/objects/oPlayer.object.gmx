<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorKid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
jump = 8.5 * global.grav
jump2 = 7 * global.grav
maxSpeed = 3
maxVspeed = 9
gravity = 0.4 * global.grav

frozen = false
djump = true
onPlatform = false
image_speed = 0.2
nudgeBlockCheck = false;



if not global.dotkid {
    mask_index = sPlayerMask
    sprite_index = sPlayerIdle
    if global.grav == 1 {
        mask_index = sPlayerMask
    }
    else {
        mask_index = sPlayerMaskFlip
    }
}
else {
    mask_index = sDotkid
    sprite_index = sDotkid
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Edge of screen death

if x &lt; 0 {
    if global.deathEnabled killPlayer()
    with oBorderDeath if type == 'left' highlight_count = 0
}
if x &gt; 800 {
    if global.deathEnabled killPlayer()
    with oBorderDeath if type == 'right' highlight_count = 0
}
if y &lt; 0 {
    if global.deathEnabled killPlayer()
    with oBorderDeath if type == 'top' highlight_count = 0
}
if y &gt; 608 {
    if global.deathEnabled killPlayer()
    with oBorderDeath if type == 'bottom' highlight_count = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.frameaction_jump = false
global.frameaction_djump = false
global.frameaction_jumpslow = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///record add list
if global.record==1 {
    //#1
    ds_list_add(global.recordList,keyboard_check_direct(global.key_right));
    
    ds_list_add(global.recordList,keyboard_check_direct(global.key_left));
    
    ds_list_add(global.recordList,keyboard_check_pressed(global.key_right));  
     
    ds_list_add(global.recordList,keyboard_check_pressed(global.key_left));
    
    ds_list_add(global.recordList,keyboard_check(global.key_jump));
    
    ds_list_add(global.recordList,keyboard_check_pressed(global.key_jump));
    
    ds_list_add(global.recordList,keyboard_check_released(global.key_jump));
    
    //#2
    ds_list_add(global.recordList,keyboard_check(ord("J")));
    
    ds_list_add(global.recordList,keyboard_check(ord("K")));
    
    ds_list_add(global.recordList,keyboard_check(ord("P")));
    
    ds_list_add(global.recordList,keyboard_check(ord("O")));
    
    //#3
    ds_list_add(global.recordList,keyboard_check_pressed(ord('A')));
    
    ds_list_add(global.recordList,keyboard_check_pressed(ord('D')));
    
    ds_list_add(global.recordList,keyboard_check(ord("U")));
    
    ds_list_add(global.recordList,keyboard_check(ord("I")));
    
    ds_list_add(global.recordList,keyboard_check_pressed(ord("N")));
    
     ds_list_add(global.recordList,keyboard_check_pressed(ord("M")));

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dotkid / regular kid

if global.dotkid and mask_index != sDotkid {
    mask_index = sDotkid
    sprite_index = sDotkid
}
else if not global.dotkid and mask_index == sDotkid {
    mask_index = sPlayerMask
    sprite_index = sPlayerIdle
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// standard stuff
var L = keyboard_check_direct(global.key_left) 
var R = keyboard_check_direct(global.key_right)
var h = R
if h == 0 h = -L
if frozen h = 0



// Check for block underneath for nudging.
if( global.checkNudgeEarly ) {
    nudgeBlockCheck = place_meeting(x,y+global.grav,oBlock);
} else {
    nudgeBlockCheck = false;
}

var slipBlockTouching = instance_place(x,y+4*global.grav,oSlipBlock)

// moving
if h != 0 {
    if distance_to_object(oWalljumpR) &gt; 1 and distance_to_object(oWalljumpL) &gt; 1 {
        global.player_xscale = h
    }
    if (h == -1 and distance_to_object(oWalljumpR) &gt; 1) or (h == 1 and distance_to_object(oWalljumpL) &gt; 1) {
        if slipBlockTouching == noone {
            hspeed = maxSpeed * h
        }
        else {
            if (h == 1 and hspeed &lt; maxSpeed) or (h == -1 and hspeed &gt; -maxSpeed) {
                hspeed += slipBlockTouching.slip * h
            }
        }
        sprite_index = sPlayerRunning
        image_speed = 0.5
    }
}
// not moving
else {
    if slipBlockTouching == noone {
        hspeed = 0
    }
    else {
        if hspeed &gt; 0 {
            hspeed -= slipBlockTouching.slip
            if hspeed &lt;= 0 hspeed = 0
        }
        else if hspeed &lt; 0 {
            hspeed += slipBlockTouching.slip
            if hspeed &gt;= 0 hspeed = 0
        }
    }
    sprite_index = sPlayerIdle
    image_speed = 0.2
}

// set jump/fall sprite
if not onPlatform {
    if vspeed*global.grav &lt; -0.05 {
        sprite_index = sPlayerJump
    }
    else if vspeed*global.grav &gt; 0.05 {
        sprite_index = sPlayerFall
    }
}
// fall off platform
else {
    if not place_meeting(x,y+4*global.grav,oPlatform) {
        onPlatform = false
    }
}

// slide block
var slideBlockTouching = instance_place(x,y+global.grav,oSlideBlock)
if slideBlockTouching != noone {
    hspeed += slideBlockTouching.h
}

// terminal velocity
if abs(vspeed) &gt; maxVspeed {
    vspeed = sign(vspeed)*maxVspeed
}

// jump, shoot, suicide
if not frozen {
    if keyboard_check_pressed(global.key_shoot)
        and not keyboard_check(vk_control) playerShoot()
    if keyboard_check_pressed(global.key_jump) playerJump()
    if keyboard_check_released(global.key_jump) playerVJump()
    if keyboard_check(ord("J")) playerJump()
    if keyboard_check(ord("K")) playerVJump()
    if keyboard_check_pressed(global.key_suicide) killPlayer()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///walljumps

var onVineL = distance_to_object(oWalljumpL) &lt;= 1 and place_free(x,y+global.grav)
var onVineR = distance_to_object(oWalljumpR) &lt;= 1 and place_free(x,y+global.grav)

if onVineL or onVineR {
    if onVineR global.player_xscale = -1
    else global.player_xscale = 1
    vspeed = 2*global.grav
    sprite_index = sPlayerSliding
    image_speed = 0.5
    
    // pressed away from the vine
    if (onVineL and keyboard_check_pressed(global.key_right)) || keyboard_check(ord("P"))
    or (onVineR and keyboard_check_pressed(global.key_left)) || keyboard_check(ord("O")) {
        
        // jumping off vine
        if keyboard_check(global.key_jump) {
            if onVineR hspeed = -15
            else hspeed = 15
            vspeed = -9 * global.grav
            audio_play_sound(sndWallJump,0,0)
            sprite_index = sPlayerJump
        }
        
        // walking off vine
        else {
            if onVineR hspeed = -3
            else hspeed = 3
            sprite_index = sPlayerFall
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.deathEnabled killPlayer()
with other {
    highlight_count = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// push against blocks horizontally
if not place_free(x+hspeed,y) {
    if global.grav == 1 {
        var dir
        if hspeed &lt;= 0 dir = 180
        if hspeed &gt; 0 dir = 0
        move_contact_solid(dir, abs(hspeed))
    }
    else {
        var dir
        if hspeed &lt; 0 dir = 180
        if hspeed &gt;= 0 dir = 0
        move_contact_solid(dir, abs(hspeed))
    }
    hspeed = 0
}

// push against blocks vertically
if not place_free(x,y+vspeed) {
    if global.grav == 1 {
        var dir
        if vspeed &lt;= 0 dir = 90
        if vspeed &gt; 0 {
            dir = 270
            djump = true
        }
        move_contact_solid(dir, abs(vspeed))
    }
    else {
        var dir
        if vspeed &lt;= 0 {
            dir = 90
            djump = true
        }
        if vspeed &gt; 0 dir = 270
        move_contact_solid(dir, abs(vspeed))
    }
    vspeed = 0
}

if not place_free(x+hspeed,y+vspeed) {
    hspeed = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.grav == 1 {
    // touching platform
    if y-vspeed/2 &lt;= other.y {
        
        // snap to platform
        if other.vspeed &gt;= 0 {
            y = other.y-9
            vspeed = other.vspeed
        }
        onPlatform = true
        djump = true
    }
}
else {
    // touching platform
    if y-vspeed/2 &gt;= other.y+other.sprite_height-1 {
    
        // snap to platform
        if other.yspeed &lt;= 0 {
            y = other.y+other.sprite_height+8
            vspeed = other.yspeed
        }
        onPlatform = true
        djump = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (global.grav == 1) {
    draw_sprite_ext(sprite_index,image_index,round(x),round(y),
    global.player_xscale,1,image_angle,image_blend,image_alpha)
}
else {
    //need to draw the player a pixel off when flipped for some reason
    draw_sprite_ext(sprite_index,image_index,round(x),round(y+1),
    global.player_xscale,-1,image_angle,image_blend,image_alpha)
}*/

var drawY = y
if global.grav == -1 drawY += 1

if mask_index != sDotkid {
    if global.showhitbox != 2 {
        draw_sprite_ext(sprite_index,image_index,x,drawY,
        global.player_xscale,global.grav,image_angle,image_blend,image_alpha)
    }
    if global.showhitbox == 1 {
        draw_sprite_ext(mask_index,0,x,drawY,
        global.player_xscale,global.grav,image_angle,c_white,0.5)
    }
    else if global.showhitbox == 2 {
        draw_sprite_ext(mask_index,0,x,drawY,
        global.player_xscale,global.grav,image_angle,c_white,1)
    }
}
else {
    draw_sprite(sDotkid,0,x,y)
    if global.dotkidoutline {
        draw_sprite(sDotkidOutline,0,x,y+8)
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
