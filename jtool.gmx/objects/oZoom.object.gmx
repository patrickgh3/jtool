<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorZoom</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 1
x1 = 0
y1 = 0
x2 = 1056
y2 = 608
x1_target=x1
y1_target=y1
x2_target=x2
y2_target=y2
mouseview_xlast=0
mouseview_ylast=0

x1_previous=x1
y1_previous=y1
x2_previous=x2
y2_previous=y2
zoom_previous=zoom
has_previous = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// changing zoom level (change target)
var zoomlast = zoom
if( ( keyboard_check( vk_control ) &amp;&amp; mouse_wheel_up() ) or keyboard_check_pressed(ord('C')) ) {
    if zoom &lt; 2 zoom += 0.5
    else if zoom == 4 zoom = 8
    else zoom += 1
}
else if( ( keyboard_check( vk_control ) &amp;&amp; mouse_wheel_down() ) or keyboard_check_pressed(ord('X')) ) {
    if zoom &lt;= 2 zoom -= 0.5
    else if zoom == 8 zoom = 4
    else zoom -= 1
}
zoom = clamp(zoom,1,8)
if global.state != globalstate_idle or window_get_fullscreen() {
    zoom = zoomlast
}
var endw = view_wport/zoom
var endh = view_hport/zoom
if zoom != zoomlast {
    x1_target = mouse_x-endw/2
    y1_target = mouse_y-endh/2
    x2_target = mouse_x+endw/2
    y2_target = mouse_y+endh/2
}

// panning view (change target)
var mouseview_x = mouse_x-view_xview
var mouseview_y = mouse_y-view_yview
if ( keyboard_check(vk_space) or mouse_check_button(mb_middle) ) &amp;&amp; keyboard_check( vk_control ) {
    var dx = mouseviewx_last - mouseview_x
    var dy = mouseviewy_last - mouseview_y;
    x1_target += dx
    y1_target += dy
    x2_target += dx
    y2_target += dy
}
mouseviewx_last=mouseview_x
mouseviewy_last=mouseview_y

// clamp target
x1_target = clamp(x1_target,0,view_wport-endw)
y1_target = clamp(y1_target,0,view_hport-endh)
x2_target = clamp(x2_target,endw,view_wport)
y2_target = clamp(y2_target,endh,view_hport)

// ease in view to target
var ease = 0.3;
if abs(x1 - x1_target) &lt; 1.5 and abs(x2 - x2_target) &lt; 1.5 ease = 1
x1 += (x1_target-x1)*ease
y1 += (y1_target-y1)*ease
x2 += (x2_target-x2)*ease
y2 += (y2_target-y2)*ease

view_xview = floor(x1)
view_yview = floor(y1)
view_wview = floor(x2)-floor(x1)
view_hview = floor(y2)-floor(y1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
