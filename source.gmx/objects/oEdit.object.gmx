<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorPencil</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-80</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sEditCursor</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Places and removes objects with the mouse.

// bounds of the area where you can place and remove objects
xmin = 0
ymin = 0
xmax = 799
ymax = 607

// selected object and sprite. set by the menu object.
selected_object = oEditBlock
selected_sprite = sEditBlock
selected_killer = false

// used internally
xsnapped = 0
ysnapped = 0
cursor_in_area = false
clearUndoStack();
undo_rightpressedinedit = false
undo_leftpressedinedit = false
undo_nochanges = true

draggedInstance = noone;
dragStartX = 0;
dragStartY = 0;

undoDelay = 30;
redoDelay = 30;

xsnapped_previous = 0
ysnapped_previous = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor_in_area = point_in_rect(mouse_x,mouse_y,xmin,ymin,xmax,ymax)

var left = mouse_check_button(mb_left)
var right = mouse_check_button(mb_right)
var control = keyboard_check_direct(vk_control)
var alt = keyboard_check_direct(vk_alt)
var space = keyboard_check_direct( vk_space );
var middleHeld = mouse_check_button( mb_middle );
var middlePressed = mouse_check_button_pressed( mb_middle );
var leftHeld = mouse_check_button(mb_left)
var leftpressed = mouse_check_button_pressed(mb_left)
var rightpressed = mouse_check_button_pressed(mb_right)

if not left undo_leftpressedinedit = false
if not right undo_rightpressedinedit = false

var shouldCaptureControls = cursor_in_area &amp;&amp; global.state == globalstate_idle;

if( shouldCaptureControls ) {
    // Object rotation.
    if( !control &amp;&amp; !alt &amp;&amp; mouse_wheel_up() ) {
        selectPrevObject();
    }
    if( !control &amp;&amp; !alt &amp;&amp; mouse_wheel_down() ) {
        selectNextObject();
    }
}

var xx = mouse_x+(snap-sprite_get_width(selected_sprite))/2
var yy = mouse_y+(snap-sprite_get_height(selected_sprite))/2
xsnapped = floor(xx/snap)*snap
ysnapped = floor(yy/snap)*snap
x = mouse_x
y = mouse_y

if( shouldCaptureControls ) {
   
    // changing grid snap.
    if( alt &amp;&amp; mouse_wheel_down() ) {
        snap = max( 1, snap / 2 );
        saveConfig()
    }
    if( alt &amp;&amp; mouse_wheel_up() ) {
        snap = min( 32, snap * 2 );
        saveConfig()
    }
    
    // dropper
    if control {
        draggedInstance = noone;
        cursor_sprite = sCursorDropper
        window_set_cursor(cr_none)
        if leftpressed {
            x = -1000
            y = -1000
            var inst = instance_position(mouse_x,mouse_y,all)
            if inst != noone and objectInPalette(inst.object_index) {
                selected_object = inst.object_index
                selected_sprite = inst.sprite_index
                selected_killer = object_is_ancestor(inst.object_index, oKiller)
            }
        }
    }
    // code editor
    else if alt and not instance_exists(oInputOverlay) { 
        draggedInstance = noone;
        cursor_sprite = sCursorCoder
        window_set_cursor(cr_none)
        if leftpressed {
            x = -1000
            y = -1000
            var inst = instance_position(mouse_x,mouse_y,all)
            if inst != noone and objectInPalette(inst.object_index) and codable_is_codable(inst) {
                inputOverlay(input_textarea,inputCallback_addCodeToObject,'Enter Code for Step Event:')
                selected_instance = inst;
                if inst.code_step_written != '' then keyboard_string=inst.code_step_written
            }
        }
    } else if( space || middleHeld || draggedInstance != noone ) {  // object movement
        handleObjectDragMode( middlePressed || leftpressed, middleHeld || leftHeld );
    } else { //pencil
        draggedInstance = noone;
        cursor_sprite = -1
        window_set_cursor(cr_default)
        
        // creating
        if leftpressed and not right {
            undo_leftpressedinedit = true
            addUndoEvent( 'c' );
            undo_nochanges = false
        }
        if left and not right and undo_leftpressedinedit {
            // just clicked
            if leftpressed or selected_object == oPlayerStart {
                editCreateObjectIfNotSamePos(xsnapped, ysnapped, selected_object)
            }
            // dragging
            else {
                var dx = xsnapped - xsnapped_previous
                var dy = ysnapped - ysnapped_previous
                if abs(dx) &gt;= abs(dy) and dx != 0 and snap != 1 {
                    for (var ox = xsnapped_previous; ox*sign(dx) &lt;= xsnapped*sign(dx); ox += snap*sign(dx)) {
                        var fract = (ox-xsnapped_previous) / dx
                        var oy = ysnapped_previous + fract * dy
                        oy = round(oy/snap)*snap
                        editCreateObjectIfFree(ox, oy, selected_object)
                    }
                }
                else if abs(dx) &lt; abs(dy) and dy != 0 and snap != 1 {
                    for (var oy = ysnapped_previous; oy*sign(dy) &lt;= ysnapped*sign(dy); oy += snap*sign(dy)) {
                        var fract = (oy-ysnapped_previous) / dy
                        var ox = xsnapped_previous + fract * dx
                        ox = round(ox/snap)*snap
                        editCreateObjectIfFree(ox, oy, selected_object)
                    }
                }
                else if snap == 1 and (dx != 0 or dy != 0) {
                    editCreateObjectIfNotSamePos(xsnapped, ysnapped, selected_object)
                }
            }
        }
        
        // destroying
        if rightpressed and not left {
            undo_rightpressedinedit = true
            addUndoEvent( 'd' );
            undo_nochanges = false
        }
        if right and not left and undo_rightpressedinedit {
            with all {
                if not objectInPalette(object_index) continue
                if global.waterlocked and
                    (object_index == oWater
                    or object_index == oWater2
                    or object_index == oWater3) continue
                
                if (place_meeting(x,y,oEdit)
                or collision_line(other.xprevious, other.yprevious, other.x, other.y,id,true,false))
                and object_index != oPlayerStart {
                    var undoStr = createStringFromInstance( self );
                    with( oEdit ) { expandUndoEvent( undoStr ); }
                    instance_destroy()
                }
            }
            with oPatBall {
                if collision_line(other.xprevious, other.yprevious, other.x, other.y,id,true,false) {
                    instance_destroy()
                }
            }
        }
    }
}
else {
    cursor_sprite = -1
    window_set_cursor(cr_default)
}

// undo
if keyboard_check_direct(vk_control) and keyboard_check_pressed(ord('Z'))
and global.state == globalstate_idle and not left and not right and not middleHeld {
    handleUndoCommand();
    undo_nochanges = false
    undoDelay = 20;
}

if keyboard_check_direct(vk_control) and keyboard_check(ord('Z') )
and global.state == globalstate_idle and not left and not right and not middleHeld {
    undoDelay -= 1;
    if( undoDelay &lt;= 0 ) {
        handleUndoCommand();
        undo_nochanges = false
        undoDelay = 4;
    }
}

// redo
if keyboard_check_direct(vk_control) and keyboard_check_pressed(ord('Y'))
and global.state == globalstate_idle and not left and not right and not middleHeld {
    handleRedoCommand();
    undo_nochanges = false
    redoDelay = 20;
}

if keyboard_check_direct(vk_control) and keyboard_check(ord('Y') )
and global.state == globalstate_idle and not left and not right and not middleHeld {
    redoDelay -= 1;
    if( redoDelay &lt;= 0 ) {
        handleRedoCommand();
        undo_nochanges = false
        redoDelay = 4;
    }
}

xsnapped_previous = xsnapped
ysnapped_previous = ysnapped

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if cursor_in_area and global.state == globalstate_idle {
    if( !keyboard_check(vk_control) &amp;&amp; !keyboard_check_direct(vk_alt) &amp;&amp; !keyboard_check_direct( vk_space ) &amp;&amp; !mouse_check_button( mb_middle ) ) {
        var color = c_white
        if selected_killer color = global.color_killer
        draw_sprite_ext(selected_sprite,0,xsnapped,ysnapped,1,1,0,color,0.3)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
